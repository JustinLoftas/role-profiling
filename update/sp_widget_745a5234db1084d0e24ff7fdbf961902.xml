<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function roleProfilingComparison($scope,$http,spUtil) {
	/* widget controller */
	var c = this;
	var totalSkills = 0;
	c.profileId = '';
	c.userId = '';
	c.userName = '';
	c.profileName = '';
	c.skills = [];
	c.percentMatch = 0;
	c.totalSkills = 0;
	c.totalMatched = 0;
	c.totalLower = 0;
	c.totalHigher = 0;
	c.percentMatched = 0;
	c.percentLower = 0;
	c.percentHigher = 0;
	c.percentMissing = 0;
	c.levelFilter = '';
	c.profileSet = false;
	c.userSet = false;
	c.sortColumn = 'user_level_value';
	c.sortAscending = true;
	c.editingSkill = -1;

	c.sortOrder = function(sortColumn){
		c.sortAscending = (c.sortColumn === sortColumn) ? !c.sortAscending : true;
		c.sortColumn = sortColumn;
	};

	c.setSkillFilter = function(skill){
		var skillFilter = skill === c.levelFilter ? '' : skill;
		c.levelFilter = skillFilter;
	};

	c.getGlyphClass = function(levelMatch){
		return {
			"column-row-text matching-text": levelMatch == 'matched',
			"column-row-text higher-text" : levelMatch == 'higher' || levelMatch == 'user_only',
			"column-row-text lower-text" : levelMatch == 'lower',
			"glyphicon glyphicon-remove missing-text" : levelMatch == 'missing'
		};
	};

	c.getOrderIcon = function(order){
		if (c.sortColumn === 'user_level_value' || c.sortColumn === 'skill_level_value'){
			return {
				"glyphicon glyphicon-sort-by-order-alt sort-extra" : order == true,
				"glyphicon glyphicon-sort-by-order sort-extra" : order == false
			};
		}
		else {
			return {
				"glyphicon glyphicon-sort-by-alphabet-alt sort-extra" : order == true,
				"glyphicon glyphicon-sort-by-alphabet sort-extra" : order == false
			};
		}
	};

	c.resetData = function(){
		c.profileId = '';
		c.userId = '';
		c.skills = [];
		c.percentMatch = 0;
		c.totalSkills = 0;
		c.totalMatched = 0;
		c.totalLower = 0;
		c.totalHigher = 0;
		c.percentMatched = 0;
		c.percentLower = 0;
		c.percentHigher = 0;
		c.percentMissing = 0;
		c.levelFilter = '';
		c.showMatchingDetails = false;
		c.userName = '';
		c.profileName = '';
		c.editingSkill = -1;
	};

	$scope.$on('GetComparisonData', function(evt, profileData){
		if (!profileData.profileId || !profileData.userId){
			c.setSkillFilter('');
			c.skills = [];
			return;
		}
		c.profileName = profileData.profileName;
		c.userName = profileData.userName;
		c.userId = profileData.userId;
		c.profileId = profileData.profileId;
		c.userSet = true;
		c.editingSkill = -1;
		c.profileSet = true;
		$http.get('/api/x_78492_profiling/role_profile_data/get_data?user_id=' + c.userId + '&profile_id=' + c.profileId)
			.then(function(response){
			var skillsInfo = response.data.result;
			c.skills = skillsInfo.skills;
			c.totalSkills = skillsInfo.totalSkills;
			c.totalMatched = skillsInfo.totalMatched;
			c.totalHigher = skillsInfo.totalHigher;
			c.totalLower = skillsInfo.totalLower;
			c.totalMissing = skillsInfo.totalMissing;
			totalSkills = c.totalSkills;
			if (totalSkills > 0){
				c.percentMatched = (c.totalMatched/totalSkills * 100).toFixed(1);
				c.percentHigher = (c.totalHigher/totalSkills * 100).toFixed(1);
				c.percentLower = (c.totalLower/totalSkills * 100).toFixed(1);
				c.percentMissing = (c.totalMissing/totalSkills * 100).toFixed(1);
			}
			else {
				c.percentMatched = 0;
				c.percentHigher = 0;
				c.percentLower = 0;
				c.percentMissing = 0;
			}
		}, function(errResponse){
			c.setSkillFilter('');
			c.skills = [];
			c.percentMatched = 0;
			c.percentHigher = 0;
			c.percentLower = 0;
			c.percentMissing = 0;
		});
	});

	c.takeSnapShot = function(){
		var snapshotData = {
			userId : c.userId,
			profileId : c.profileId,	  
			totalSkills : c.totalSkills,
			skillsHigher : c.percentHigher,
			skillsLower : c.percentLower,
			skillsMatched : c.percentMatched,
			skillsMissing : c.percentMissing
		};
		$http.post('/api/x_78492_profiling/role_profile_data/take_snapshot', snapshotData)
			.then(function(response){
				spUtil.addInfoMessage('Skill snapshot taken');
			});
	}
	
	c.cancelEdit = function(skill){
		skill.temp_user_level_value = skill.user_level_value;
		c.editingSkill = -1;
	}
	
	c.startEdit = function(skill){
		c.editingSkill = skill.user_skill_sys_id;
		
	}
	
	c.updateSkillLevel = function(skill){
		var skillData = {
			skill : skill,
			userId : c.userId
		};
		$http.post('/api/x_78492_profiling/role_profile_data/update_user_skill', skillData)
			.then(function(response){
			console.log(response);
			spUtil.addInfoMessage(response.data.result.message);
			skill.user_level_value = skill.temp_user_level_value;
			var profileData = {
				profileName :	c.profileName,
				userName :c.userName,
				userId :c.userId,
				profileId : c.profileId
			}
			$scope.$broadcast('GetComparisonData', profileData);
			c.editingSkill = -1;
		}, function(error){
			spUtil.addInfoMessage(error.data.result.message);
			c.cancelEdit();
		});
	}
}

				]]></client_script>
        <controller_as>c</controller_as>
        <css>.column-row-text::first-letter {
   font-size: 12pt;
   text-transform: uppercase;
}

.column-row-text {
   font-size: 10pt;
   text-transform: uppercase;
   color: black;

}

.detailed-column-row-text {
   padding-left: 5px;

}

.column-skill-row-text::first-letter {
   font-size: 12pt;
   text-transform: uppercase;
}

.column-skill-row-text {
   font-size: 10pt;
   text-transform: uppercase;
}

div.column-skill-row-header {
   font-size: 12pt;
   text-transform: uppercase;
   text-align: center;
   margin-top: -6px;
  font-weight: normal;
}

div.column-row-header {
   font-size: 12pt;
   text-transform: uppercase; 
   margin-top: -6px;
   font-weight: normal;
}

th {
  background-color: #343d47; 
  color: white !important;
  height: 30px;
}

th.column-header {
   width: 20%;
}

th.skill-header {
   width: 40%;
}

td.column-skill-row {
  width: 20%;
}

td.skill-description {
  width: 40%;
}

.header-description::first-letter {
  font-family: "Trebuchet MS", Helvetica, sans-serif;
   font-size: 20pt;
  text-transform: uppercase;
}

.header-description {
  font-family: "Trebuchet MS", Helvetica, sans-serif;
   font-size: 16pt;
  text-transform: uppercase;
 text-align: center;
 width: 100%;
min-width:200px;
}

.select-description::first-letter {
  font-family: "Trebuchet MS", Helvetica, sans-serif;
   font-size: 14pt;
  text-transform: uppercase;
}

.select-description {
   font-family: "Trebuchet MS", Helvetica, sans-serif;
   font-size: 12pt;
  text-transform: uppercase;
  text-align: center;
  width: 100%;
  min-width:200px;
  padding-top: 10px;
}

.header-result {
  font-family: "Trebuchet MS", Helvetica, sans-serif;
   font-size: 22pt;
 text-align: right;
 width: 20%;
}

div.canvas-container {
  text-align: center;
}

div.gauge-hover {
   position: absolute;
   top: -50px;
}

div.btn-holder {
    padding: 10px 0px 10px 0px; 
    text-align: center;
}

canvas {
    cursor:pointer;
}

td.column-skill-level {
    text-align: center;
}

div.gauge-tooltiptext {
    visibility: hidden;
    width: 100%;
    background-color: white;
    color: black;
    text-align: center;
    padding: 5px;
    border: 1px solid black;
    border-radius: 5px;
    font-family: "Trebuchet MS", Helvetica, sans-serif;
   font-size: 9pt;
    /* Position the tooltip text - see examples below! */
    position: relative;
    top: -30px;
    z-index: -100;
}

div.gauge-tooltip:hover .gauge-tooltiptext {
    visibility: visible;
    z-index: 1;
}

div.gauge-tooltip {
     position: relative;
}

div.detail-header {
   min-width: 300px;
}

i.sort-extra {
  vertical-align: text-bottom;
 padding-left: 7px;
 color: white;
font-size: 12pt;
}

span.column-header-sort {
   cursor: pointer;
}

table {
       width: 100%;
 }

.table-container {
    top: -25px;
}

thead, tbody, tr, td, th { 
   display: block; 
}

tr:after {
    content: ' ';
    display: block;
    visibility: hidden;
    clear: both;
}

tbody {
    height: 400px;
    overflow-y: auto;
}

tbody td, thead th  {
    width: 20%;
    float: left;
}

.panel-info &gt; .column-row-text {
   background-color: #3A424E !important;
  border-color: #3A424E !important;
}

.panel-info {
   border-color: #3A424E !important;
}

div.skill-level-tooltiptext {
    visibility: hidden;
    width: 100%;
    background-color: white;
    color: black;
    text-align: center;
    padding: 5px;
    border: 1px solid black;
    border-radius: 5px;
    font-family: "Trebuchet MS", Helvetica, sans-serif;
   font-size: 9pt;
    /* Position the tooltip text - see examples below! */
    position: absolute;
    width: 100%;
    z-index: -1;
}

div.skill-level-tooltip:hover div.skill-level-tooltiptext {
    visibility: visible;
    z-index: 1;
}

div.skill-level-tooltip {
    position: relative;
}

.fa-camera {
   padding-right: 10px; 
}

.snapshot {
   text-align: center; 
}

.skill-level-edit-dialog {
    z-index: 50; 
  position: absolute;
  width: 100%;
  background-color: #FFF;
  border: solid 1px black;
  border-radius: 5px;
  padding: 5px;
  margin-top: -8px;
  text-align: left;
}

.color-green {
   color: #48c891; 
}

.color-red {
   color: red; 
}

.fa-check-circle-o, .fa-times-circle-o {
  font-size: 15pt;
  vertical-align: middle;
}

tbody.skill-level-edit {
   height: auto; 
}

.skill-level-select {
   width: 76%; 
}

.skill-edit-buttons {
  width : 12%;
}


</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>role-profiling-comparison</id>
        <internal>false</internal>
        <link/>
        <name>Role Profiling Comparison</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	data.gaugeColours = {
		matching : {
			'color' : gs.getProperty('x_78492_profiling.skill_match.color', 'lime'),
			'shadow_color' : gs.getProperty('x_78492_profiling.skill_match.shadow_color', '#347220')
		},
		missing : {
			'color' : gs.getProperty('x_78492_profiling.skill_missing.color', 'red'),
			'shadow_color' : gs.getProperty('x_78492_profiling.skill_missing.shadow_color', 'maroon')
		},
		higher : {
			'color' : gs.getProperty('x_78492_profiling.skill_higher.color', '#24d6f2'),
			'shadow_color' : gs.getProperty('x_78492_profiling.skill_higher.shadow_color', '#137382')
		},
		lower : {
			'color' : gs.getProperty('x_78492_profiling.skill_lower.color', 'orange'),
			'shadow_color' : gs.getProperty('x_78492_profiling.skill_lower.shadow_color', '#7f5a1e')
		},
		inactive : {
			'color' : gs.getProperty('x_78492_profiling.skill_inactive.color', '#C0C0C0'),
			'shadow_color' : gs.getProperty('x_78492_profiling.skill_inactive.shadow_color', '#808080')
		}
	};
	
	data.skillLevels = new x_78492_profiling.ProfileManagementUtils().getSkillLevelChoices();
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>justin.loftas</sys_created_by>
        <sys_created_on>2019-10-02 16:23:51</sys_created_on>
        <sys_id>745a5234db1084d0e24ff7fdbf961902</sys_id>
        <sys_mod_count>115</sys_mod_count>
        <sys_name>Role Profiling Comparison</sys_name>
        <sys_package display_value="Role Profiling" source="x_78492_profiling">98075f7fdb672200e24ff7fdbf961997</sys_package>
        <sys_policy/>
        <sys_scope display_value="Role Profiling">98075f7fdb672200e24ff7fdbf961997</sys_scope>
        <sys_update_name>sp_widget_745a5234db1084d0e24ff7fdbf961902</sys_update_name>
        <sys_updated_by>justin.loftas@up3.co.uk</sys_updated_by>
        <sys_updated_on>2020-10-30 13:56:47</sys_updated_on>
        <template><![CDATA[<div>
  <style>
    .missing-text {
      color: {{c.data.gaugeColours.missing.color}} !important;
    }

    .matching-text {
      color: {{c.data.gaugeColours.matching.color}} !important;
    }

    .higher-text {
      color: {{c.data.gaugeColours.higher.color}} !important;
    }

    .lower-text {
      color: {{c.data.gaugeColours.lower.color}} !important;
    }

    .inactive-text {
      color: {{c.data.gaugeColours.inactive.color}} !important;
    }
  </style>
  <div class="row">
    <div class="col-xs-12">
      <div ng-show="c.skills.length > 0">
        <div class="row">
          <div class="snapshot col-lg-12">
            <button class="btn btn-primary" type="button" ng-click="c.takeSnapShot()">
              <i class="fa fa-camera"></i>Skill snapshot
            </button>
          </div>

          <!-- Matching skills -->
          <div class="col-sm-6 col-md-3">
            <div class="header-description green-text" ng-class="{'inactive-text' : c.levelFilter != 'matched' && c.levelFilter != '', 'matching-text' : c.levelFilter == 'matched' || c.levelFilter == ''}">${User skills match}
            </div>
            <div class="gauge-tooltip">
              <!-- Show the inactive gauge -->
              <div ng-if="c.levelFilter != 'matched' && c.levelFilter != ''" class="canvas-container">
                <role-profile-gauge when-select="c.setSkillFilter(skill)" gauge-for="matched" gauge-percent="{{c.percentMatched}}" gauge-info="c.data.gaugeColours.inactive">
                </role-profile-gauge>
              </div>
              <!-- Show the active gauge -->
              <div ng-if="c.levelFilter == 'matched' || c.levelFilter == ''" class="canvas-container">
                <role-profile-gauge when-select="c.setSkillFilter(skill)" gauge-for="matched" gauge-percent="{{c.percentMatched}}" gauge-info="c.data.gaugeColours.matching">
                </role-profile-gauge>
              </div>
              <role-profile-gauge-hover gauge-hover-text="${User matches} {{c.totalMatched}} ${of} {{c.totalSkills}} ${profile skills}">
              </role-profile-gauge-hover>
            </div>
          </div>

          <!-- Missing skills -->
          <div class="col-sm-6 col-md-3">
            <div class="header-description red-text" ng-class="{'inactive-text' : c.levelFilter != 'missing' && c.levelFilter != '', 'missing-text' : c.levelFilter == 'missing' || c.levelFilter == ''}">${User skills missing}
            </div>
            <div class="gauge-tooltip">
              <!-- Show the inactive gauge -->
              <div ng-if="c.levelFilter != 'missing' && c.levelFilter != ''" class="canvas-container">
                <role-profile-gauge when-select="c.setSkillFilter(skill)" gauge-for="missing" gauge-percent="{{c.percentMissing}}" gauge-info="c.data.gaugeColours.inactive">
                </role-profile-gauge>
              </div>
              <!-- Show the active gauge -->
              <div ng-if="c.levelFilter == 'missing' || c.levelFilter == ''" class="canvas-container">	
                <role-profile-gauge when-select="c.setSkillFilter(skill)" gauge-for="missing" gauge-percent="{{c.percentMissing}}" gauge-info="c.data.gaugeColours.missing">
                </role-profile-gauge>
              </div>
              <role-profile-gauge-hover gauge-hover-text="${User is missing} {{c.totalMissing}} ${of} {{c.totalSkills}} ${profile skills}">
              </role-profile-gauge-hover>
            </div>
          </div>

          <!-- Higher skills -->
          <div class="col-sm-6 col-md-3">
            <div class="header-description higher-text" ng-class="{'inactive-text' : c.levelFilter != 'higher' && c.levelFilter != '', 'higher-text' : c.levelFilter == 'higher' || c.levelFilter == ''}">${User skills higher}
            </div>
            <div class="gauge-tooltip">
              <!-- Show the inactive gauge -->
              <div ng-if="c.levelFilter != 'higher' && c.levelFilter != ''" class="canvas-container">
                <role-profile-gauge when-select="c.setSkillFilter(skill)" gauge-for="higher" gauge-percent="{{c.percentHigher}}" gauge-info="c.data.gaugeColours.inactive">
                </role-profile-gauge>
              </div>
              <!-- Show the active gauge -->
              <div ng-if="c.levelFilter == 'higher' || c.levelFilter == ''" class="canvas-container">		
                <role-profile-gauge when-select="c.setSkillFilter(skill)" gauge-for="higher" gauge-percent="{{c.percentHigher}}" gauge-info="c.data.gaugeColours.higher">
                </role-profile-gauge>
              </div>
              <role-profile-gauge-hover gauge-hover-text="${User has} {{c.totalHigher}} ${skills at a higher level than required profile skills}">
              </role-profile-gauge-hover>
            </div>
          </div>

          <!-- Lower skills -->
          <div class="col-sm-6 col-md-3">
            <div class="lower-text header-description" ng-class="{'inactive-text' : c.levelFilter != 'lower' && c.levelFilter != '', 'lower-text' : c.levelFilter == 'lower' || c.levelFilter == ''}">${User skills lower}</div>
            <div class="gauge-tooltip">
              <!-- Show the inactive gauge -->
              <div ng-if="c.levelFilter != 'lower' && c.levelFilter != ''" class="canvas-container">
                <role-profile-gauge when-select="c.setSkillFilter(skill)" gauge-for="lower" gauge-percent="{{c.percentLower}}" gauge-info="c.data.gaugeColours.inactive">
                </role-profile-gauge>
              </div>
              <!-- Show the active gauge -->
              <div ng-if="c.levelFilter == 'lower' || c.levelFilter == ''" class="canvas-container">	
                <role-profile-gauge  when-select="c.setSkillFilter(skill)" gauge-for="lower" gauge-percent="{{c.percentLower}}" gauge-info="c.data.gaugeColours.lower">
                </role-profile-gauge>
              </div>
              <role-profile-gauge-hover gauge-hover-text="${User has} {{c.totalLower}} ${skills at a lower level than the required profile skills}">
              </role-profile-gauge-hover>
            </div>
          </div>
        </div>
      </div>

        <!-- Table data -->
        <div class="row">
          <div class="col-sm-12 table-container">
            <div ng-if="c.skills.length > 0">
              <table class="table table-striped table-hover">
                <thead class="results-header">
                  <tr>
                    <th class="column-header">
                      <div class="column-row-header">
                        <span class="column-header-sort" ng-click="c.sortOrder('category')">${Category}</span>
                        <i ng-if="c.sortColumn === 'category'" ng-class="c.getOrderIcon(c.sortAscending)"></i>
                      </div>
                    </th>
                    <th class="skill-header">
                      <div class="column-row-header">
                        <span class="column-header-sort" ng-click="c.sortOrder('skill')">${Skill}</span>
                        <i ng-if="c.sortColumn === 'skill'" ng-class="c.getOrderIcon(c.sortAscending)"></i>
                      </div>
                    </th>
                    <th class="column-header">
                      <div class="column-skill-row-header">
                        <span class="column-header-sort" ng-click="c.sortOrder('skill_level_value')">${Profile level}</span>
                        <i ng-if="c.sortColumn === 'skill_level_value'" ng-class="c.getOrderIcon(c.sortAscending)"></i>

                      </div>
                    </th>
                    <th class="column-header">
                      <div class="column-skill-row-header">
                        <span class="column-header-sort" ng-click="c.sortOrder('user_level_value')">${User skill level}</span>
                        <i ng-if="c.sortColumn === 'user_level_value'" ng-class="c.getOrderIcon(c.sortAscending)"></i>
                      </div>
                    </th>
                  </tr>
                </thead>
                <tbody class="results-body">
                  <tr ng-repeat="skill in c.skills | filter: {matched:c.levelFilter} | orderBy : c.sortColumn : c.sortAscending">		
                    <td class="column-skill-row">
                      <div class="column-row-text" ng-bind="skill.category"></div>
                    </td>
                    <td class="skill-description">
                      <div class="column-row-text detailed-column-row-text" ng-bind="skill.skill"></div>
                    </td>
                    <td class="column-skill-level column-skill-row">
                      <div class="skill-level-tooltip">
                        <div class="detailed-column-row-text" ng-if="skill.skill_level == 'missing'"  ng-class="c.getGlyphClass(skill.skill_level)">
                        </div>
                        <div class="column-row-text detailed-column-row-text" ng-if="skill.skill_level != 'missing'" ng-bind="skill.skill_level">
                        </div>
                        <div class="skill-level-tooltiptext" ng-bind="skill.skill_level_description"></div>
                      </div>
                    </td>
                    <td class="column-skill-level column-skill-row" ng-dblclick="c.startEdit(skill)">                     
                      <div class="skill-level-tooltip">
                        <div ng-if="c.editingSkill == skill.user_skill_sys_id && c.data.skillLevels.length > 0" class="skill-level-edit-dialog">                    
                          <table class="skill-level-edit">
                            <tbody class="skill-level-edit">
                            <tr>
                              <td class="skill-level-select">     
                                <select ng-model="skill.temp_user_level_value">
                                  <option ng-selected="skill.user_level_value == skillLevel.value" ng-repeat="skillLevel in c.data.skillLevels" value="{{skillLevel.value}}">{{skillLevel.label}}</option>
                                </select>
                              </td>
                              <td class="skill-edit-buttons">
                                <i class="fa fa-check-circle-o color-green" ng-click="c.updateSkillLevel(skill)"></i> 
                              </td>
                              <td class="skill-edit-buttons">
                                <i class="fa fa-times-circle-o color-red" ng-click="c.cancelEdit(skill)"></i>
                              </td>
                            </tr>
                            </tbody>
                          </table>
                        </div>
                        <div class="detailed-column-row-text" ng-if="skill.matched == 'missing'"  ng-class="c.getGlyphClass(skill.matched)">
                        </div>
                        <div class="detailed-column-row-text" ng-if="skill.matched != 'missing'" ng-bind="skill.user_level" ng-class="c.getGlyphClass(skill.matched)">		
                        </div>
                        <div ng-if="c.editingSkill == -1" class="skill-level-tooltiptext" ng-bind="skill.user_level_description"><i class="icon-arrow-down-rounded"></i></div>
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
      </div>
      </div>
    </div>
  </div>]]></template>
    </sp_widget>
</record_update>
