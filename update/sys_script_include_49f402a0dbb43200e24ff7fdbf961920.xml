<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_78492_profiling.ProfileManagementUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ProfileManagementUtils</name>
        <script><![CDATA[var ProfileManagementUtils = Class.create();
ProfileManagementUtils.prototype = {
	
	TABLES : {
		ROLE_PROFILE : 'x_78492_profiling_role_profile',
		ROLE_PROFILE_SKILL : 'x_78492_profiling_role_profile_skill',
		SKILL_VERSION : 'x_78492_profiling_skill_version',
		SKILL_SNAPSHOT : 'x_78492_profiling_skill_snapshot',
		CHOICE : 'sys_choice',
		USER_SKILL : 'sys_user_has_skill'
	},
	
	initialize: function(grRoleProfile) {
		this.roleProfile = grRoleProfile;
	},
	
	//Function for copy a role profile which includes the skills associated
	copyRoleProfile: function(){
		try {
			if (!this.roleProfile){
				throw 'Class instantiated without profile';
			}
			var newRoleProfile = this._createRoleProfile();
			return newRoleProfile;
		}
		catch(err)
		{
			//Handle errors here
			gs.error('Error detected in Script Include ProfileManagementUtils, function copyProfile. Error message is ' + err.message);
			return;
		}
		
	},
	
	//Function for creating a new role profile based on the original
	//@returns {object} : the gliderecord with the new role profile
	_createRoleProfile: function(){
		var grProfile = new GlideRecord(this.TABLES.ROLE_PROFILE);
		grProfile.initialize();
		grProfile.setValue('name', 'Copy of ' + this.roleProfile.getValue('name'));
		grProfile.setValue('description', this.roleProfile.getValue('description'));
		var profileId = grProfile.insert();
		this._copyProfileSkills(profileId);
		return grProfile;
		
	},
	
	//Function for copying the role profile skills of the original record to a new skill profile
	//@profileId {string}: the sys_id of the new role profile to copy the role profile skills to
	//@returns {boolean} : true if successful
	_copyProfileSkills: function(profileId){
		var grProfileSkill = new GlideRecord(this.TABLES.ROLE_PROFILE_SKILL);
		grProfileSkill.addQuery('role_profile', this.roleProfile.getValue('sys_id'));
		grProfileSkill.query();
		while (grProfileSkill.next()){
			if (!this._createProfileSkill(grProfileSkill, profileId)){
				return false;
			}
		}
		return true;
	},
	
	//Function for creating a role profile skill based on a copy of an existing role profile skill
	//@profileSkill {object}: a gliderecord containing the existing roel profile skill
	//@profileId {string} : the sys_id of the role profile to relate the new role profile skill to
	//@returns {boolean} : true if successful
	_createProfileSkill : function(profileSkill, profileId){
		var grProfileSkill = new GlideRecord(this.TABLES.ROLE_PROFILE_SKILL);
		grProfileSkill.initialize();
		grProfileSkill.setValue('skill', profileSkill.getValue('skill'));
		grProfileSkill.setValue('level', profileSkill.getValue('level'));
		grProfileSkill.setValue('role_profile', profileId);
		grProfileSkill.insert();
		return true;
	},
	
	//Function for updating the role profile skill for if any attributes that force a change to the display name occur
	//@returns {boolean}: true if successful, false on error
	updateProfileSkills : function(){
		try {
			if (!this.roleProfile){
				throw new Error('Class instantiated without profile');
			}
			var profileSkillGR = new GlideRecord(this.TABLES.ROLE_PROFILE_SKILL);
			profileSkillGR.addQuery('role_profile', this.roleProfile.getValue('sys_id'));
			profileSkillGR.query();
			while (profileSkillGR.next()){
				profileSkillGR.setValue('sys_updated_on', new GlideDateTime());
				profileSkillGR.update();
			}
			return true;
		}
		catch(err)
		{
			//Handle errors here
			gs.logError('Error detected in Script Include ProfileManagementUtils, function updateProfileSkills, error message is ' + err.message);
			return false;
		}
	},
	
	//Function for updating the skill count on a role profile
	//@profileid {string}: the sys_id of the role profile to update
	//@returns {boolean} : true if an amendment occurs, false if not or an error
	updateProfileSkillCount : function(profileid){
		try {
			var profileSkillCount = 0;
			var roleProfileSkillGR = new GlideAggregate(this.TABLES.ROLE_PROFILE_SKILL);
			roleProfileSkillGR.addQuery('role_profile', profileid);
			roleProfileSkillGR.addAggregate('COUNT');
			roleProfileSkillGR.query();
			if (roleProfileSkillGR.next()){
				profileSkillCount  = roleProfileSkillGR.getAggregate('COUNT');
			}
			if (profileSkillCount > 0){
				var roleProfileGR = new GlideRecord(this.TABLES.ROLE_PROFILE);
				if (roleProfileGR.get(profileid)){
					roleProfileGR.setValue('skill_count', profileSkillCount);
					roleProfileGR.update();
					return true;
				}
			}
			return false;
		}
		catch (err){
			gs.error('Error detected in Script Include ProfileManagementUtils, function updateProfileSkillCount. Error message is ' + err.message);
			return false;
		}
	},
	
	//Function for getting the applicable versions for a skill category
	//@skillCategoryID {string}: the sys_id of the skill category
	//@returns {array} : An array of skill version sys_ids that are applicable  
	getApplicableVersions : function(skillCategoryID){
		try {
			if (gs.nil(skillCategoryID)){
				return '';
			}
			var skillVersion = [];
			var skillVersionGR = new GlideRecord(this.TABLES.SKILL_VERSION);
			skillVersionGR.addQuery('applicable_categories', 'CONTAINS', skillCategoryID);
			skillVersionGR.addActiveQuery();
			skillVersionGR.query();
			while (skillVersionGR.next()){
				skillVersion.push(skillVersionGR.getUniqueValue());
			}
			return skillVersion.join();
		}
		catch (err){
			gs.error('Error detected in Script Include ProfileManagementUtils, function getApplicableVersions. Error message is ' + err.message);
			return null;
		}
	},
	
	//Function for getting the applicable versions for a skill category
	//@skillCategoryID {string}: the sys_id of the skill category
	//@returns {array} : An array of skill version sys_ids that are applicable  
	filterExistingSkills : function(roleProfileID){
		try {
			if (gs.nil(roleProfileID)){
				return '';
			}
			var skills = [];
			var profileSkillGR = new GlideRecord(this.TABLES.ROLE_PROFILE_SKILL);
			profileSkillGR.addQuery('role_profile', roleProfileID);
			profileSkillGR.query();
			while (profileSkillGR.next()){
				skills.push(profileSkillGR.getValue('skill'));
			}
			return skills.join();
		}
		catch (err){
			gs.error('Error detected in Script Include ProfileManagementUtils, function filterExistingSkills. Error message is ' + err.message);
			return '';
		}
	},

    //Function for creating a snapshot record for the user
	//@snapshotData {object}: an ibject containing the data points to be captured
	//@returns {object} : The Snapshot GlideRecord object
	createSnapshot : function (snapshotData) {
		try {
			var result = {
				outcome : 'success',
				message : 'Snapshot successful'
			};
			var snapshotGR = new GlideRecord(this.TABLES.SKILL_SNAPSHOT);
			snapshotGR.initialize();
			snapshotGR.setValue('user', snapshotData.userId);
			snapshotGR.setValue('role_profile', snapshotData.profileId);
			snapshotGR.setValue('skills_higher', snapshotData.skillsHigher || 0);
			snapshotGR.setValue('skills_matching', snapshotData.skillsMatched || 0);
			snapshotGR.setValue('skills_lower', snapshotData.skillsLower || 0);
			snapshotGR.setValue('skills_missing', snapshotData.skillsMissing || 0);
			snapshotGR.setValue('total_skills', snapshotData.totalSkills || 0);
			snapshotGR.insert();
			return result;
		}
		catch (err){
			gs.error('Error detected in Script Include ProfileManagementUtils, function createSnapshot. Error message is ' + err.message);
			result.outcome = 'error';
			result.message = err.message;
			return result;
		}
	},

	//Function for the updating of or adding skills to a user 
	//@skillData {object}: an object containing the data points to be captured
	//@returns {object} : The Snapshot GlideRecord object
	updateUserSkill : function(skillData){
		try {
			var result = {
				outcome : 'success',
				message : 'Skill level successfully updated'
			};
			var skill = skillData.skill;
			var userId = skillData.userId;
			var userSkillGR = new GlideRecord(this.TABLES.USER_SKILL);
			if (skill.matched != 'missing' && !gs.nil(skill.user_skill_sys_id)){
				if (userSkillGR.get(skill.user_skill_sys_id)){
					userSkillGR.setValue('x_78492_profiling_skill_level', skill.temp_user_level_value);
					userSkillGR.update();
				}
				else {
					throw new Error('Could not find user skill record');
				}
			}
			else {
				userSkillGR.initialize();
				userSkillGR.setValue('skill', skill.skill_id);
				userSkillGR.setValue('user', userId);
				userSkillGR.setValue('x_78492_profiling_skill_level', skill.temp_user_level_value);
				userSkillGR.insert();
				result.message = 'Skill for user successfully created';
			}
			return result;
		}
		catch(err){
			gs.error('Error detected in Script Include ProfileManagementUtils, function updateUserSkill. Error message is ' + err.message);
			result.outcome = 'error';
			result.message = err.message;
			return result;			
		}
	},

	//Function for getting the skill level choices
	//@returns {array} : An array of objects containing choices and values
	getSkillLevelChoices : function(){
		try {
			var choices = [];
			var choice = {};
			choice.label = 'Missing';
			choice.value = '-1';
			choices.push(choice);
			var choiceGR = new GlideRecord(this.TABLES.CHOICE);
			choiceGR.addQuery('name', 'sys_user_has_skill');
			choiceGR.addQuery('element', 'x_78492_profiling_skill_level');
			choiceGR.addQuery('inactive', false);
			choiceGR.addQuery('language', 'en');
			choiceGR.query();
			while (choiceGR.next()){
				choice = {};
				choice.label = choiceGR.getValue('label');
				choice.value = choiceGR.getValue('value');
				choices.push(choice);
			}
			return choices;

		}
		catch (err){
			gs.error('Error detected in Script Include ProfileManagementUtils, function getSkillLevelChoices. Error message is ' + err.message);
			return [];
		}
	},

	//Function for getting the snap shot data for a user against a profile in a format that can be used by ChartJS
	//@userId {string}: The sys_id of the user to query
	//@profileId {string}: The sys_id of the profile to query
	//@returns {array} : An array of objects containing choices and values
	getSnapshotData : function (userId, profileId){
		try {
			var higherColour = gs.getProperty('x_78492_profiling.skill_higher.color', '#24d6f2');
			var matchingColour = gs.getProperty('x_78492_profiling.skill_match.color', 'lime');
			var lowerColour = gs.getProperty('x_78492_profiling.skill_lower.color', 'orange');
			var missingColour = gs.getProperty('x_78492_profiling.skill_missing.color', 'red');
			var totalSkills = [];
			var higherSkills = [];
			var matchingSkills = [];
			var lowerSkills = [];
			var missingSkills = [];
			var totalColour = '#000';
			var borderWidth = 2;
			var snapshotData = {
				type: 'line',
				data : {
					labels : [],
					datasets : []
				},
				options: {
					scales: { 
						yAxes: [{
							ticks: {
								beginAtZero: true,
								suggestedMax : 100
							},
							id: 'y-percentage',
							type: 'linear',
							scaleLabel : {
								display : true,
								labelString : '% Skill Matching'
							},
							position : 'left'
						},
						{
							ticks: {
								beginAtZero: true,
								suggestedMax: 200
							},
							id: 'y-total',
							type: 'linear',
							scaleLabel : {
								display : true,
								labelString : '# Total Skills'
							},
							position : 'right'
						}]
					}
				}
			};
            var dataSets = snapshotData.data.datasets;
			var snapshotGR = new GlideRecord(this.TABLES.SKILL_SNAPSHOT);
			snapshotGR.addQuery('user', userId);
			snapshotGR.addQuery('role_profile', profileId);
			snapshotGR.addQuery('date', '>', gs.monthsAgo(6));
			snapshotGR.orderBy('date');
			snapshotGR.query();
			while (snapshotGR.next()){
				snapshotData.data.labels.push(snapshotGR.getDisplayValue('date'));
				totalSkills.push(snapshotGR.getValue('total_skills'));
				higherSkills.push(snapshotGR.getValue('skills_higher'));
				matchingSkills.push(snapshotGR.getValue('skills_matching'));
				lowerSkills.push(snapshotGR.getValue('skills_lower'));
				missingSkills.push(snapshotGR.getValue('skills_missing'));				
			}
			var totalDataSet = {
				yAxisID: 'y-total',
				label : '# Total Skills',
				data : totalSkills,
				borderColor : [totalColour],
				borderWidth : borderWidth,
				fill : false
			};
			var higherDataSet = {
				yAxisID: 'y-percentage',
				label : '% Higher Skills',
				data : higherSkills,
				borderColor : [higherColour],
				borderWidth : borderWidth,
				fill : false
			};
			var matchingDataSet = {
				yAxisID: 'y-percentage',
				label : '% Matching Skills',
				data : matchingSkills,
				borderColor : [matchingColour],
				borderWidth : borderWidth,
				fill : false
			};
			var lowerDataSet = {
				yAxisID: 'y-percentage',
				label : '% Lower Skills',
				data : lowerSkills,
				borderColor : [lowerColour],
				borderWidth : borderWidth,
				fill : false
			};
			var missingDataSet = {
				yAxisID: 'y-percentage',
				label : '% Missing Skills',
				data : missingSkills,
				borderColor : [missingColour],
				borderWidth : borderWidth,
				fill : false
			};
			dataSets.push(totalDataSet);
			dataSets.push(higherDataSet);
			dataSets.push(matchingDataSet);
			dataSets.push(lowerDataSet);
			dataSets.push(missingDataSet);
			return snapshotData;
		}
		catch (err){
			gs.error('Error detected in Script Include ProfileManagementUtils, function getSnapshotData. Error message is ' + err.message);
			return null;
		}
	},
	
	type: 'ProfileManagementUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jloftas</sys_created_by>
        <sys_created_on>2017-02-04 12:24:30</sys_created_on>
        <sys_id>49f402a0dbb43200e24ff7fdbf961920</sys_id>
        <sys_mod_count>40</sys_mod_count>
        <sys_name>ProfileManagementUtils</sys_name>
        <sys_package display_value="Role Profiling" source="x_78492_profiling">98075f7fdb672200e24ff7fdbf961997</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Role Profiling">98075f7fdb672200e24ff7fdbf961997</sys_scope>
        <sys_update_name>sys_script_include_49f402a0dbb43200e24ff7fdbf961920</sys_update_name>
        <sys_updated_by>justin.loftas@up3.co.uk</sys_updated_by>
        <sys_updated_on>2020-11-01 12:43:11</sys_updated_on>
    </sys_script_include>
</record_update>
