<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_78492_profiling.ProfileManagementAJAX</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ProfileManagementAJAX</name>
        <script><![CDATA[var ProfileManagementAJAX = Class.create();
ProfileManagementAJAX.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	//Function for returning an object relating to a role profile and a user, these are passed in as parameters via a GlideAjax call
	getComparisonData: function(profileId, userId){
		try {
			var json = new global.JSON();
			var ajaxUsed = false;
			//Parameters passed in by the GlideAjax call, we need both
			if (!profileId && !userId){
				profileId = this.getParameter('sysparm_profile_id');
				userId = this.getParameter('sysparm_user_id');
				ajaxUsed = true;
			}
			
			//Object function variables
			this.totalSkills = 0;
			this.totalMatched = 0;
			this.totalHigher = 0;
			this.totalLower = 0;
			this.totalMissing = 0;
			this.totalSkillsUser = 0;
			this.userName = this._getUserName(userId);
			this.profileName = '';
			this.levelDescription = {};
			
			//Local variables used in the function
			var userProfileSkills = {};
			
			//Create an empty array for the skills list on our userProfile object
			userProfileSkills.skills = [];
			
			//If we don't have a userId or a profileId passed then just return the empty object
			if (!userId || !profileId){
				return json.encode(userProfileSkills);
			}
			
			//Populate the userProfileSkills skills array from the profile
			userProfileSkills.skills = this.getProfileSkills(profileId);
			
			if (userProfileSkills.skills.length > 0){
				//Update the role profile skills with the results of the users skills
				this._matchUserSkills(userProfileSkills, userId);
			}

			//Set our overall result values
			userProfileSkills.totalSkills = this.totalSkills;
			userProfileSkills.totalMatched = this.totalMatched;
			userProfileSkills.totalHigher = this.totalHigher;
			userProfileSkills.totalLower = this.totalLower;
			userProfileSkills.totalMissing = this.totalMissing;
			userProfileSkills.userName = this.userName;
			userProfileSkills.profileName = this.profileName;
			userProfileSkills.totalSkillsUser = this.totalSkillsUser;

			if (ajaxUsed){
				return json.encode(userProfileSkills);
			}
			
			return userProfileSkills;
		}
		
		
		
		catch(err){
			gs.error('Error detected in Script Include x_78492_profiling.ProfileManagementAJAX, function getComparisonData. Error is: ' + err.message);
			return null;
		}
	},
	
	//Function for getting all the role profile skills and setting the user defaults from a role profile
	//@profileId {string} : the sys_id of the role profile to get all the associated role profile skills from
	//@returns {object array}: an array of objects containing all the role profile skills
	getProfileSkills : function (profileId){
		try {
			var profileSkills = [];
			var profileSkillInfo = {};
			var skillId = null;
			var skillLevel = '';
			var skillLevelValue = 0;
			var skillLevelDescription = '';
			var userLevelDescription = gs.getMessage('The user does not have this skill');
			var grProfileSkill = new GlideRecord('x_78492_profiling_role_profile_skill');
			grProfileSkill.addQuery('role_profile', profileId);
			grProfileSkill.orderBy('skill.x_78492_profiling_skill_category');
			grProfileSkill.orderBy('skill.name');
			grProfileSkill.query();
			while (grProfileSkill.next()){
				if (this.profileName == ''){
					this.profileName = grProfileSkill.getDisplayValue('role_profile');
				}
				this.totalSkills ++;
				this.totalMissing ++;
				skillId = grProfileSkill.getValue('skill');
				skillLevel = grProfileSkill.getDisplayValue('level');
				skillLevelValue = grProfileSkill.getValue('level');
				skillLevelDescription = this._getLevelDescription(skillLevelValue);
				profileSkillInfo = {
					skill_id : skillId,
					category : grProfileSkill.skill.x_78492_profiling_category.getDisplayValue(),
					skill : grProfileSkill.getDisplayValue('skill'),
					skill_level : skillLevel,
					skill_level_value : skillLevelValue,
					skill_level_description : skillLevelDescription,
					matched : 'missing',
					user_level: 'none',
					is_sme : false,
					user_level_value : '-1',
					user_level_description : userLevelDescription,
					user_skill_sys_id : this.totalSkills,
					editing : false,
					temp_user_level_value : '-1'
				};
				profileSkills.push(profileSkillInfo);
			}
			
			return profileSkills;
		}
		catch(err){
			gs.error('Error detected in Script Include x_78492_profiling.ProfileManagementAJAX, function getUserProfileSkills. Error is: ' + err.message);
			return [];
		}
		
	},
	
	//Function for matching a users skills with role profile skills and updating the user defaults
	//@userProfileSkills {object array} : an array of objects containing all the role profile skills
	//userId {string}: the sys_id of the user to match against the role profile skills
	//@returns {VOID}: an updated role profile skills object
	_matchUserSkills: function(userProfileSkills, userId){
		var matched = false;
		var skillId = null;
		var userLevelValue = '-1';
		var userLevel = '';
		var skillLevelDescription = '';
		var userSkill = {};
		var grUserSkill = new GlideRecord('sys_user_has_skill');
		grUserSkill.addQuery('user', userId);
		grUserSkill.query();
		while (grUserSkill.next()){
			matched = false;
			skillId = grUserSkill.getValue('skill');
			userLevelValue = grUserSkill.getValue('x_78492_profiling_skill_level');
			userLevel = grUserSkill.getDisplayValue('x_78492_profiling_skill_level');
			skillLevelDescription = this._getLevelDescription(userLevelValue);
			for (var i = 0; i < userProfileSkills.skills.length; i++){
				if (userProfileSkills.skills[i].skill_id == skillId){
					matched = true;
					var upf = userProfileSkills.skills[i];
					upf.user_level = userLevel;
					upf.is_sme = grUserSkill.getDisplayValue('x_78492_profiling_sme');
					upf.user_level_value = userLevelValue;
					upf.user_level_description = skillLevelDescription;
					upf.user_skill_sys_id = grUserSkill.getUniqueValue();
					this.totalSkillsUser ++;
					upf.temp_user_level_value = userLevelValue;
					switch(true){
						case upf.skill_level_value == userLevelValue:
							this.totalMatched++;
							this.totalMissing--;
							upf.matched = 'matched';
							break;
						case upf.skill_level_value < userLevelValue:
							this.totalHigher++;
							this.totalMissing--;
							upf.matched = 'higher';
							break;
						default:
							this.totalLower++;
							upf.matched = 'lower';
							this.totalMissing--;
							break;
					}
					break;
				}
			}
			if (!matched){
				this.totalHigher++;
				this.totalSkills++;
				this.totalSkillsUser++;
				userSkill = {
					skill_id : skillId,
					category : grUserSkill.skill.x_78492_profiling_category.getDisplayValue(),
					skill: grUserSkill.getDisplayValue('skill'),
					skill_level : 'missing',
					skill_level_value : -1,
					skill_level_description : gs.getMessage('The user has this skill but the profile does not'),
					matched : 'higher',
					user_level : userLevel,
					user_level_value : userLevelValue,
					user_level_description : skillLevelDescription,
					is_sme : grUserSkill.getDisplayValue('x_78492_profiling_sme'),
					user_skill_sys_id : grUserSkill.getUniqueValue(),
					editing : false,
					temp_user_level_value : userLevelValue
				};
				userProfileSkills.skills.push(userSkill);
			}
		}
	},
	
	//Function for getting the name of a user
	//@id {string} : the sys_id of the user
	_getUserName : function (id){
		var user = new GlideRecord('sys_user');
		if (user.get(id)){
			return user.getValue('name');
		}
		return null;
	},
	
	//Function for getting the description of the skill level, this is held in the hint field on the choice list record
	//@level {string} : the level of the skill to query the choice list against
	//@defaultString {string} : the value to return if the hint on the choice list record is empty
	//@returns: the hint from the choice list or the value in the defaultString if not present
	_getLevelDescription : function (level){
		if (this.levelDescription[level]){
			return this.levelDescription[level];
		}

		var skillChoice = new GlideRecord('sys_choice');
		skillChoice.addQuery('inactive', false);
		skillChoice.addQuery('name', 'sys_user_has_skill');
		skillChoice.addQuery('value', level);
		skillChoice.addQuery('element', 'x_78492_profiling_skill_level');
		skillChoice.setLimit(1);
		skillChoice.query();
		if (skillChoice.next()){
			this.levelDescription[level] = gs.nil(skillChoice.getValue('hint')) ? level : skillChoice.getValue('hint');
		}
		return this.levelDescription[level];
		
	},
	
	type: 'ProfileManagementAJAX'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jloftas</sys_created_by>
        <sys_created_on>2016-12-22 19:44:15</sys_created_on>
        <sys_id>ab164526dbf72200e24ff7fdbf96195e</sys_id>
        <sys_mod_count>106</sys_mod_count>
        <sys_name>ProfileManagementAJAX</sys_name>
        <sys_package display_value="Role Profiling" source="x_78492_profiling">98075f7fdb672200e24ff7fdbf961997</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Role Profiling">98075f7fdb672200e24ff7fdbf961997</sys_scope>
        <sys_update_name>sys_script_include_ab164526dbf72200e24ff7fdbf96195e</sys_update_name>
        <sys_updated_by>justin.loftas@up3.co.uk</sys_updated_by>
        <sys_updated_on>2020-10-31 19:07:33</sys_updated_on>
    </sys_script_include>
</record_update>
